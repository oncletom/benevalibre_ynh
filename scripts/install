#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
# admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
association=$YNH_APP_ARG_ASSOCIATION
#---
db_name=$YNH_APP_INSTANCE_NAME
language="fr_FR"
db_user="benevalibre_app"
app_workers_count=1

### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
### About --weight and --time
### ynh_script_progression will show to your final users the progression of each scripts.
### In order to do that, --weight will represent the relative time of execution compared to the other steps in the script.
### --time is a packager option, it will show you the execution time since the previous call.
### This option should be removed before releasing your app.
### Use the execution time, given by --time, to estimate the weight of a step.
### A common way to do it is to set a weight equal to the execution time in second +1.
### The execution time is given for the duration since the previous call. So the weight should be applied to this previous call.
ynh_script_progression --message="Validating installation parameters..." --time --weight=1

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --time --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=is_public --value=$is_public
ynh_app_setting_set --app=$app --key=language --value=$language
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_app_setting_set --app=$app --key=db_user --value=$db_user
ynh_app_setting_set --app=$app --key=association --value=$association

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Configuring firewall..." --time --weight=1

### Use these lines if you have to open a port for the application
### `ynh_find_port` will find the first available port starting from the given port.
### If you're not using these lines:
###		- Remove the section "CLOSE A PORT" in the remove script

# Find an available port
port=$(ynh_find_port --port=2244)
ynh_app_setting_set --app=$app --key=port --value=$port

# Optional: Expose this port publicly
# (N.B. : you only need to do this if the app actually needs to expose the port publicly.
# If you do this and the app doesn't actually need you are CREATING SECURITY HOLES IN THE SERVER !)

# Open the port
# ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --time --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# SYSTEM LOCALES (can take a while)
#=================================================
ynh_script_progression --message="Generating system locales..." --time --weight=2

ynh_replace_string --match_string="# $language.UTF-8 UTF-8" --replace_string="$language.UTF-8 UTF-8" --target_file=/etc/locale.gen
locale-gen

#=================================================
# SETUP DATABASE
# Password is available as $db_pwd
#=================================================
ynh_script_progression --message="Creating database..." --time --weight=1

ynh_mysql_setup_db --db_user="$db_user" --db_name="$db_name"
ynh_mysql_execute_as_root --database="$db_name" --sql="ALTER DATABASE ${db_name} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --time --weight=2

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file conf/app.src

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

#=================================================
# APP PYTHON DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing app dependencies..." --time --weight=2

python3 -m venv $final_path/venv
$final_path/venv/bin/pip install --upgrade pip wheel gunicorn mysqlclient
$final_path/venv/bin/pip install -r $final_path/requirements/production.txt

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring nginx web server..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --time --weight=1

# Create a system user
ynh_system_user_create --username=$app



#=================================================
# SPECIFIC SETUP
#=================================================
app_secret_key=$(head -c50 /dev/urandom | base64)

# Add extra module to support SSOWat
cp -R ../sources/patches/benevalibre_ynh $final_path

# Configure app
cp ../sources/extra_files/app/config.env "$final_path/config.env"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$final_path/config.env"
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$final_path/config.env"
ynh_replace_string --match_string="__APP_SECRET_KEY__" --replace_string="$app_secret_key" --target_file="$final_path/config.env"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$final_path/config.env"
ynh_replace_string --match_string="__APP_DB_USER__" --replace_string="$db_user" --target_file="$final_path/config.env"
ynh_replace_string --match_string="__APP_DB_NAME__" --replace_string="$db_name" --target_file="$final_path/config.env"
ynh_replace_string --match_string="__APP_DB_PASSWORD__" --replace_string="$db_pwd" --target_file="$final_path/config.env"
ynh_replace_string --match_string="__PATH_URL__" --replace_string="$path_url" --target_file="$final_path/config.env"


#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service+socket..." --time --weight=1

systemdfile="/etc/systemd/system/$app.service"
socketfile="/etc/systemd/system/$app.socket"
cp ../conf/systemd.socket "$socketfile"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$socketfile"
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$socketfile"
chown root: "$socketfile"

ynh_add_systemd_config --service="$app" --others_var="app_workers_count"
systemctl start $app.socket --quiet
systemctl enable $app.socket --quiet

#=================================================
# SETUP APPLICATION WITH CURL
#=================================================

### Use these lines only if the app installation needs to be finalized through
### web forms. We generally don't want to ask the final user,
### so we're going to use curl to automatically fill the fields and submit the
### forms.

# Set right permissions for curl install
chown -R $app: $final_path

# Set the app as temporarily public for curl call
# Cf. https://yunohost.org/groups_and_permissions
ynh_script_progression --message="Configuring SSOwat..." --time --weight=1
ynh_permission_update --permission "main" --add visitors

# Reload SSOwat config
yunohost app ssowatconf

# Reload Nginx
ynh_systemd_action --service_name=nginx --action=reload

# Remove the public access
if [ $is_public -eq 0 ]
then
	ynh_permission_update --permission "main" --remove visitors
fi

#=================================================
# MODIFY A CONFIG FILE
#=================================================

### `ynh_replace_string` is used to replace a string in a file.
### (It's compatible with sed regular expressions syntax)

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="$final_path/config.env"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
chown -R root: $final_path

mkdir -p $final_path/var/media
$final_path/venv/bin/python3 $final_path/manage.py collectstatic
chown -R $app: $final_path/var

#=================================================
# SETUP APPLICATION MODELS
#=================================================
ynh_script_progression --message="Setup benevalibre app..." --time --weight=1

$final_path/venv/bin/python3 $final_path/manage.py migrate
$final_path/venv/bin/python3 $final_path/manage.py shell <<EOF
from benevalibre.association.models import Association

Association.objects.create(name="$association", is_active=True)
EOF

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --time --weight=1

### `ynh_use_logrotate` is used to configure a logrotate configuration for the logs of this app.
### Use this helper only if there is effectively a log file for this app.
### If you're not using this helper:
###		- Remove the section "BACKUP LOGROTATE" in the backup script
###		- Remove also the section "REMOVE LOGROTATE CONFIGURATION" in the remove script
###		- As well as the section "RESTORE THE LOGROTATE CONFIGURATION" in the restore script
###		- And the section "SETUP LOGROTATE" in the upgrade script

# Use logrotate to manage application logfile(s)
ynh_use_logrotate --logfile="$final_path/var/log/$app.log"

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --time --weight=1

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.
### (N.B. : this line only makes sense if the app adds a service to the system!)

yunohost service add $app --description "Logiciel de gestion des groupements d'achats" --log "$final_path/copanier-requests.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --time --weight=1

### `ynh_systemd_action` is used to start a systemd service for an app.
### Only needed if you have configure a systemd service

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring SSOwat..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_permission_update --permission "main" --add visitors
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
